// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnboardingWeatherAPI.Models.Shared;

#nullable disable

namespace OnboardingWeatherAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220411142017_add-city-and-factual-weather-prediction")]
    partial class addcityandfactualweatherprediction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OnboardingWeatherAPI.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("OnboardingWeatherAPI.Models.FactualWeatherPrediction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("WeatherDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("FactualWeatherPredictions");
                });

            modelBuilder.Entity("OnboardingWeatherAPI.Models.FactualWeatherPrediction", b =>
                {
                    b.HasOne("OnboardingWeatherAPI.Models.City", "City")
                        .WithMany("FactualWeatherPredictions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("OnboardingWeatherAPI.Models.City", b =>
                {
                    b.Navigation("FactualWeatherPredictions");
                });
#pragma warning restore 612, 618
        }
    }
}
