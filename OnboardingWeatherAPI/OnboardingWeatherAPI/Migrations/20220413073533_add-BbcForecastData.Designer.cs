// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnboardingWeatherAPI.Models.Shared;

#nullable disable

namespace OnboardingWeatherAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220413073533_add-BbcForecastData")]
    partial class addBbcForecastData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OnboardingWeatherAPI.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Kaunas"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Vilnius"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Klaipėda"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Tbilisi"
                        });
                });

            modelBuilder.Entity("OnboardingWeatherAPI.Models.FactualWeatherPrediction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("ForecasterId")
                        .HasColumnType("bigint");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ForecasterId");

                    b.ToTable("FactualWeatherPredictions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 1L,
                            Date = new DateTime(2022, 4, 13, 10, 35, 33, 190, DateTimeKind.Local).AddTicks(9374),
                            ForecasterId = 1L,
                            Temperature = 12.5
                        },
                        new
                        {
                            Id = 2L,
                            CityId = 1L,
                            Date = new DateTime(2022, 4, 12, 10, 35, 33, 190, DateTimeKind.Local).AddTicks(9406),
                            ForecasterId = 1L,
                            Temperature = 11.199999999999999
                        },
                        new
                        {
                            Id = 3L,
                            CityId = 2L,
                            Date = new DateTime(2022, 4, 13, 10, 35, 33, 190, DateTimeKind.Local).AddTicks(9408),
                            ForecasterId = 1L,
                            Temperature = 10.199999999999999
                        });
                });

            modelBuilder.Entity("OnboardingWeatherAPI.Models.Forecaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Forecasters");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "OpenWeatherMap"
                        });
                });

            modelBuilder.Entity("OnboardingWeatherDOMAIN.Models.BbcForecasterData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long>("RssCode")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("BbcForecasterData");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 4L,
                            RssCode = 611717L
                        });
                });

            modelBuilder.Entity("OnboardingWeatherAPI.Models.FactualWeatherPrediction", b =>
                {
                    b.HasOne("OnboardingWeatherAPI.Models.City", "City")
                        .WithMany("FactualWeatherPredictions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnboardingWeatherAPI.Models.Forecaster", "Forecaster")
                        .WithMany("FactualWeatherPredictions")
                        .HasForeignKey("ForecasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Forecaster");
                });

            modelBuilder.Entity("OnboardingWeatherDOMAIN.Models.BbcForecasterData", b =>
                {
                    b.HasOne("OnboardingWeatherAPI.Models.City", "City")
                        .WithOne("BbcForecasterData")
                        .HasForeignKey("OnboardingWeatherDOMAIN.Models.BbcForecasterData", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("OnboardingWeatherAPI.Models.City", b =>
                {
                    b.Navigation("BbcForecasterData");

                    b.Navigation("FactualWeatherPredictions");
                });

            modelBuilder.Entity("OnboardingWeatherAPI.Models.Forecaster", b =>
                {
                    b.Navigation("FactualWeatherPredictions");
                });
#pragma warning restore 612, 618
        }
    }
}
